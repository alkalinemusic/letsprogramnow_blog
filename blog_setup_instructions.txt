$ npm init

	package name: (blog) letsprogramnow_blog
	version: (1.0.0)
	description: Blog for my journey
	entry point: (index.js) app.js
	test command:
	git repository: (https://github.com/alkalinemusic/letsprogramnow_blog.git)
	keywords:
	author: Alan Shepherd
	license: (ISC)
	About to write to C:\Users\ashep\Documents\Coding\Web_Dev\LetsProgramNow\blog\package.json:

	{
	  "name": "letsprogramnow_blog",
	  "version": "1.0.0",
	  "description": "Blog for my journey",
	  "main": "app.js",
	  "scripts": {
	    "test": "echo \"Error: no test specified\" && exit 1"
	  },
	  "repository": {
	    "type": "git",
	    "url": "git+https://github.com/alkalinemusic/letsprogramnow_blog.git"
	  },
	  "author": "Alan Shepherd",
	  "license": "ISC",
	  "bugs": {
	    "url": "https://github.com/alkalinemusic/letsprogramnow_blog/issues"
	  },
	  "homepage": "https://github.com/alkalinemusic/letsprogramnow_blog#readme"
	}



$ npm install express mongoose body-parser --save
$ npm install ejs --save

################ Blog Index ##################

create the app.js file and open
add the requirements: express, body-parser, mongoose
create the express app object

app configuration
	connect to mongoose 
	enable ejs - view engine

create the listen port for the server


add the index route: app.get("/", function(woieurioulakjsdfojisf0))
to make sure that everything is set up correctly

open up localhost:3000 to make sure all is working

set the route to /blogs
	set render to index(.ejs) file

make views directory
make views/index.ejs file
	place test text of <h1>TEST PAGE</h1> in this file
view localhost with /blogs(route) added to end

app.js
	add the Blog.find to the index route
	render the blogs: blogs from the database

add the <%= blogs %> into the index.ejs file and test on localhost to confirm the route is working

set up the blogs.forEach command to run through each blog post
	each run through should have a separate tag for
		title
		image
		time created
		body
run localhost again to test




########## Basic Layout ##########

make views/partials folder
make views/partials/header.ejs file
make views/partials/footer.ejs file

in the header file
	set up html boilerplate code
	move the ending </body> </html> tags to the footer file
	place temporary test h1 inside both header and footer just to test connectivity
	link to both in the index.ejs file
		<%- include ("partials/header") %>
		<%- include ("partials/footer") %>

header file
	add in semantic UI CDN link
	add menu(nav) bar
		create the home link
		create the new blog link
		create the icon next to the home link
			i used one from semantic
make public directory
make stylesheets directory
make stylesheets/main.css file



########## Putting the C in CRUD ##########

create route for the 'create new blog post'
make views/new.ejs

add css for the container.main so the menu bar does not cover it

add form for new.ejs
	input for title
	input for image
	input for blog body
	submit button

set up create blog route for where the new.ejs request is submitted

style the form - new.ejs
	put all entry fields into a div
	make the blog entry part a textarea type
	style the submit button
	make entry fields required


########## SHOWtime ##########

create the show route with a res.redirect(initially) to ensure connectivity

add link to 'show more' in the index.ejs file. this will let the user view just the one blog 
	add an anchor with the href set to "/blogs/"<%= blog._id %>"

create the logic for the route and display that show template
this will render to the show.ejs file, which shows just the one, chosen blog

create touch/views/show.ejs
	copy the new.ejs contents, but only keep >> header/footer and container and header(class) divs
	test to make sure the route works and shows the blog title
	add the image, body, and time created. just grab these lines from the index.ejs file
	stylize the remaining contents in the page
	<get semantic layout ideas for this section from the 'views/item' section in the semantic ui docs
	change date created to more readable form - add .toDateString()

permit html in the create blog section- we'll sanitize this later on so scripts can't be run

limit the blog post body to 100 characters in the main index page



########## Edit/Update ##########

app.js file:
	create the minimal edit route that renders to the edit form(not yet created)

create the views/edit.ejs file

edit.ejs file:
	put in an h1 just to ensure connectivity
	grab the content from the 'new'.ejs file and copy to edit.ejs
	change the page title
	form needs to be pre-filled

app.js 
	need to find the blog info to be edited
	use the findById function
		Blog.findById(req.params.is, function(err, foundBlog){
			if error
				redirect to blogs
			else
				redirect to edit with the foundBlog as blog info
		});


edit.ejs
	change title to 'Edit <%= blog.title %>' as we want the actual name of the blog to be edited
ensure the title is now working correctly
	change the placeholders to a value="" and put the blog title, image and text values in to each one, as they need to show the existing data so we can edit it
	the textarea is slightly different
		put <%= blog.body %> in between the textarea tags

add the update route - this is a POST request
simple res.send to ensure connectivity

edit.ejs
	change the method to PUT
	change the action route to /blogs/<%= blog._id %>?_method=PUT

need to use the method-override package

npm install method-override --save

in app.js 
	<put this line at the top with the other requirements>
	methodOverride = require("method-override")
	add the app config >> app.use(methodOverride("_method"));

	check connection
	add correct method to send the updated info
		Blog.findByIdAndUpdate



########## DESTROYYYYYY ##########

app.js
	create the destroy route
		make a simple send at first for connectivity

show.ejs
	add a form for the delete action
		<form action="/blogs/<%= blog._id %>?_method=DELETE" method="POST">
		inside the form, create a 'delete' button

add edit link on show page
show.ejs
	make anchor tag for button
		form and anchor are not inline elements
		this makes the buttons not on the same line
		add display: inline to the form(for delete button)
		add the css to main.css
		add the id to the form

########## Final Updates ##########

use sanitizer to forbid scripts from being run

npm install express-sanitizer --save

app.js
	add require line for express-sanitizer
		expressSanitizer = requier("express-sanitizer")
	add to app config section
	must be after the bodyParser line

	add to create and update routes, as these are being sent to the database

	create and update routes
		req.body.blog.body = sanitize(req.body.blog.body)
		this needs to go after the first line in the route, after the app.get......


